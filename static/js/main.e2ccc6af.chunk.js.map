{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/SingleContact/SingleContact.js","components/ContactList/ContactList.js","components/App/App.js","index.js"],"names":["ContactForm","formInitialState","name","number","state","alert","inputHandler","target","value","setState","submitHandler","e","preventDefault","props","contacts","find","contact","toggleAlert","reset","singleContact","id","uuidv4","addContact","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","Filter","handleFilter","filter","SingleContact","deleteContact","ContactList","filteredContacts","TransitionGroup","component","map","key","App","getFilteredContact","toLowerCase","includes","contactObj","prev","animation","savedContacts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","appear","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2ccc6af.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./ContactForm.css\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n  };\n\n  state = {\n    ...this.formInitialState,\n    alert: false,\n  };\n\n  inputHandler = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitHandler = (e) => {\n    const { name, number, alert } = this.state;\n    e.preventDefault();\n\n    const { contacts } = this.props.state;\n    const isExists = contacts.find((contact) => contact.name === name);\n\n    if (isExists) {\n      this.toggleAlert(alert);\n      return this.reset();\n    }\n\n    const singleContact = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n\n    this.props.addContact(singleContact);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...this.formInitialState });\n  };\n\n  toggleAlert = (status) => {\n    this.setState({ alert: !status });\n  };\n\n  render() {\n    const { name, number, alert } = this.state;\n    const alertDelay = () => this.setState({ alert: !alert });\n\n    return (\n      <>\n        <CSSTransition\n          in={alert}\n          classNames=\"Alert\"\n          timeout={1500}\n          unmountOnExit\n          onEntered={alertDelay}\n        >\n          <button\n            onClick={this.toggleAlert}\n            className=\"AlertBtn\"\n          >{`Contact already exists!`}</button>\n        </CSSTransition>\n        <form className=\"ContactsForm\" onSubmit={this.submitHandler}>\n          <label className=\"InputName\">\n            Name\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Add name\"\n              value={name}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <label className=\"InputName\">\n            Number\n            <br />\n            <input\n              className=\"InputForm\"\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"Add phone number\"\n              value={number}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br />\n          <button type=\"submit\" className=\"SubmitBtn\">\n            Create contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  state: PropTypes.shape({\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        id: PropTypes.string,\n        namber: PropTypes.string,\n      })\n    ),\n    filter: PropTypes.string,\n  }).isRequired,\n  addContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Filter.css\";\n\nconst Filter = ({ state, handleFilter }) => {\n  const { filter } = state;\n  return (\n    <div className=\"FilterBox\">\n      <label className=\"InputLabel\">\n        Find contacts by name\n        <br />\n        <input\n          className=\"FilterForm\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contact\"\n          value={filter}\n          onChange={handleFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  state: PropTypes.shape({\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        id: PropTypes.string,\n        namber: PropTypes.string,\n      })\n    ),\n    filter: PropTypes.string,\n  }).isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./SingleContact.css\";\n\nconst SingleContact = ({ contact, deleteContact }) => {\n  const { name, id, number } = contact;\n  return (\n    <li className=\"Contact\">\n      <h4>{name}</h4>\n      <p>{number}</p>\n      <button className=\"DelBtn\" type=\"button\" id={id} onClick={deleteContact}>\n        &#10008;\n      </button>\n    </li>\n  );\n};\n\nexport default SingleContact;\n\nSingleContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    namber: PropTypes.string,\n  }).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport SingleContact from \"../SingleContact/SingleContact\";\nimport \"./ContactList.css\";\n\nconst ContactList = ({ filteredContacts, deleteContact }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"ContactList\">\n      {filteredContacts.map((contact, id) => (\n        <CSSTransition key={id} classNames=\"ListItem\" timeout={250}>\n          <SingleContact contact={contact} deleteContact={deleteContact} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      namber: PropTypes.string,\n    })\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Filter from \"../Filter/Filter\";\nimport ContactList from \"../ContactList/ContactList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    this.setState((state) => ({\n      animation: !state.animation,\n    }));\n\n    const savedContacts = localStorage.getItem(\"contacts\");\n    if (savedContacts) {\n      this.setState({\n        contacts: JSON.parse(savedContacts),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { contacts } = this.state;\n    if (prevState.contacts !== contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n    }\n  }\n\n  handleFilter = ({ target }) => {\n    const { value, name } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  getFilteredContact = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  addContact = (contactObj) => {\n    this.setState((prev) => ({\n      contacts: [...prev.contacts, contactObj],\n    }));\n  };\n\n  deleteContact = ({ target }) => {\n    const { id } = target;\n    this.setState((prev) => ({\n      contacts: prev.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"Container\">\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"Title-slideIn\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"AppTitle\">Phonebook</h1>\n        </CSSTransition>\n\n        <ContactForm state={this.state} addContact={this.addContact} />\n\n        {this.state.contacts.length === 0 && (\n          <>\n            <h2 className=\"ContactTitle\">Contacts</h2>\n            <p>Contacts list is empty. Please, create new cotnact!</p>\n          </>\n        )}\n\n        <CSSTransition\n          in={this.state.contacts.length > 1}\n          classNames=\"FilterAnimation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <Filter state={this.state} handleFilter={this.handleFilter} />\n        </CSSTransition>\n\n        <ContactList\n          filteredContacts={this.getFilteredContact()}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}